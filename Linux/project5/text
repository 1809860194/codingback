什么是进程？进程是表示资源分配的基本单位，又是调度运行的基本单位。例如用户运行自己的程序，系统就创建一个进程，并为它分配资源 ，
包括各种表格、内存空间、磁盘空间、I/O设备等。然后把该进程放入进程的就绪对列。进程调度程序选中它，为它分配 CPU 以及其他有关资源
该进程才真正运行。所以，进程是系统并发执行的单位。
在Mac、Windows、 NT 等采用微内核结构的操作系统中，进程的功能发生了变化：它只是资源分配的基本单位，而不是调度运行的单位。在微内
核结系统中，真正的调度运行单位是线程。因此实现并发的功能是线程
Linux 下的进程是Task_struct
操作系统的对进程的统一描述是 PCB ；

Linux下显示所有进程信息：ps -ef
ps -ef | grep Test
ps -ef | head -n 1 && ps -ef | grep a.out
fork 之后一般要用 if 分流
#include<stdio.h>
#include<stdlib.h>
int main()
{
    int ret = fork();
    if(ret > 0){
        //失败
    }
    else if(ret == 0){
        //子进程
    }
    else{
        //父进程
    }
    return 0;
}
task_struct 内容分类：
进程标识符 PID
状态、优先级、内存指针、I/O
进程的信息可以通过 /proc 系统文件夹查看
//getpid()系统调用返回一个会话 ID (int)
//    printf("process id :\n", getpid());

#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
int main()
{
    printf("pid:%d\n", getpid());//父进程
    printf("ppid:%d\n", getppid());//子进程
    return 0;
}
如上是系统创建进程以及运行进程
