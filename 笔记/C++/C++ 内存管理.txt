C++内存管理学习笔记一.C/C++内存分布附图二.回顾C语言中的动态内存管理        1.面试题1：malloc/calloc/realloc的区别是什么？        2.面试题2：32位平台指针为什么是4个字节？        3.面试题3：如何malloc一个大于3G的空间？三.C++中的内存管理        1.new/delete操作内置类型用法int main(){     int* ptr1 = new int;//动态申请一个int类型的空间     int* ptr2 = new int(2);//动态申请一个int类型的空间并初始化为2     int* ptr3 = new int[3];//动态申请3个int类型的空间     int* ptr4 = new int[3]();//动态申请3个int类型的空间并初始化为0     //int* ptr5 = new int[3](1);不能这么初始化     delete ptr1;     delete ptr2;     delete[] ptr3;     delete[] ptr4;     return 0;}        2.new/delete操作自定义类型用法class Date{public:     Date()     {}     Date(int year, int month, int day)      :_year(year)      , _month(month)      , _day(day)     {      cout << "date" << this << endl;     }     ~Date()     {      cout << "~date" << this << endl;    }private:     int _year;     int _month;     int _day;};int main(){     //C++中new/delete操作自定义类型     Date* d1 = new Date(2018, 11, 5);     Date* d2 = new Date[10]();//或者Date* d2 = new Date[10]     delete d1;     delete[] d2;     //C语言中malloc/delete操作自定义类型     cout << "------------------------" << endl;     Date* d3 = (Date*)malloc(sizeof(Date));     Date* d4 = (Date*)malloc(sizeof(Date)* 10);     free(d3);     free(d4);     return 0;}四.operator new和operator delete函数new(操作符)--->调用operator new(函数)--->调用malloc(函数)--->调用构造//new失败抛异常(符合C++规范)//malloc失败返回NULLdelete(操作符)-->调用析构--->调用operator delete(函数)--->free(函数)operator new实际也是通过malloc来申请空间，如果malloc申请空间成功就直接返回，否则执行用户提供的空间不足应对措施，如果用户提供该措施就继续申请，否则就抛异常。operator delete最终是通过free来释放空间的。operator new和operator delete用户也可以自己实现，用户实现时即可实现成全局函数，也可实现成类的成员函数，但是一般情况下不需要实现，除非有特殊需求五.定位new表达式(placement-new)class Date{public:Date(){}Date(int year, int month, int day)  :_year(year)  , _month(month)  , _day(day){  cout << "date" << this << endl;}~Date(){  cout << "~date" << this << endl;}private:int _year;int _month;int _day;};int main(){//d1和d2现在还不是一个对象，因为没有调用构造函数初始化，只能说大小和对象的大小相同Date* d1 = (Date*)malloc(sizeof(Date));Date* d2 = (Date*)malloc(sizeof(Date));//调用new的定位表达式初始化new(d1)Date(2018, 11, 5);//调用有参构造new(d2)Date();//调用无参构造}六.常见面试题总结        1.malloc/free和new/delete的区别？共同点：它们都是在堆上开辟空间，而且都需要手动释放。不同点：        malloc/free是函数，而new/delete是操作符，new/delete在底层调用了malloc/free        malloc申请的空间不能直接初始化，而new申请的空间会调用构造函数，可以直接传参初始化        malloc申请空间时，需要手动计算空间大小并传递，new只需在其后跟上空间的类型即可        malloc的返回值为void*, 在使用时必须强转，new不需要，因为new后跟的是空间的类型        malloc申请空间失败时，返回的是NULL，因此使用时必须判空，new不需要，但是new需要捕获异常        malloc/free只能申请内置类型的空间，不能申请自定义类型的空间，因为其不会调用构造与析构函数， 而new可以，new在申请空间后会调用构造函数完成对象的构造，delete在释放空间前会调用析构函数 完成空间中资源的清理        malloc申请的空间一定在堆上，new不一定，因为operator new函数可以重新实现        new/delete比malloc/free的效率稍微低点，因为new/delete的底层封装了malloc/free，存在函数调用的开销        2.请设计一个类，该类只能在堆上创建对象将类的构造函数私有，拷贝构造声明成私有。防止别人调用拷贝在栈上生成对象。提供一个静态的成员函数，在该静态成员函数中完成堆对象的创建        3.请设计一个类，该类只能在栈上创建对象七.单例模式
